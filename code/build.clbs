# Build instructions

# `clbs -j4` - build with development configuration in 4 threads
# `clbs debug`, `clbs dev` or `clbs release` - build everything with respective configuration
# `clbs revolc` or `clbs mod` - build certain parts of the codebase
# `clbs <cfg> clean` - removes all objects, libraries and executables
# Flag `-v` can be used to see actual compilation and linking commands

# When working with engine, desired command usually is
# `clbs -j8 dev revolc`

# When working with game, desired command usually is
# `clbs -j8 dev mod`

def buildInfo(env, tags):
	def runCodegen(input_file, output_file, gen_also_math):
		log("running codegen")
		if gen_also_math:
			last_arg= ""
		else:
			last_arg= "rtti_only"
		codegen_str= "./codegen"
		if env.os == "windows":
			codegen_str= "codegen"
		os.system(codegen_str + " " + input_file + " " + output_file + " " + last_arg)
	def filterStrs(strs, list):
		for s in strs:
			list= filter(lambda x: s not in x, list)
		return list
	def findCplFiles(dir, exts):
		return filterStrs([ "unity.c" ], findFiles(dir, exts))

	if len(tags) == 0:
		tags= [ "dev" ]

	# Clang is a lot faster than gcc, but windows support is still poor
	c_compiler= { "linux": "clang", "windows": "gcc" }[env.os]
	linker= "ld"
	lib_dir= "./lib"
	common_dep_dir= "./deps/common"
	dep_include_paths= []
	dep_defines= []
	# Common libs with unity build
	dep_include_paths += [
		common_dep_dir,
		common_dep_dir + "/chipmunk/include",
		common_dep_dir + "/vorbis/include",
		common_dep_dir + "/ogg/include",
	]
	only_revolc= "revolc" in tags
	only_mod= "mod" in tags
	build_deps= not only_revolc and not only_mod
	build_revolc= only_revolc or not only_mod

	### Codegen ##
	codegen_dir= "./tools/codegen"
	codegen= Project();
	codegen.name= "codegen"
	codegen.type= "exe"
	codegen.targetDir= "."
	codegen.includeDirs= [ codegen_dir ]
	codegen.headers= [ codegen_dir + "/main.c" ]
	codegen.src= [ codegen_dir + "/unity.c" ]
	codegen.flags= [ "std=gnu99", "w", "O3" ]
	codegen.defines= [ "GCC_BASE=NULL" ]
	codegen.compiler= c_compiler
	codegen.linker= linker

	cfg= "" # debug or dev
	target_defines= []
	target_flags= [ "std=gnu99", "pipe", "ffast-math", "fvisibility=hidden" ]
	if "debug" in tags:
		cfg= "debug"
		target_defines += [ "DEBUG" ]
		target_flags += [ "g", "O0", "mtune=native", "march=native" ]
	elif "dev" in tags:
		cfg= "dev"
		target_flags += [ "g", "O2", "mtune=native", "march=native" ]
	else:
		fail("Invalid tags: " + str(tags))

	deps_libname= "deps_" + cfg
	if build_deps:
		dep_lib_paths= []
		dep_libs= []

		# PortAudio
		if env.os == "windows":
			pa_dir= "./deps/win/portaudio-19"
			pa= Project()
			if build_deps:
				pa.name= "portaudio_" + cfg
				pa.type= "obj"
				pa.targetDir= lib_dir
				pa.includeDirs= [
					pa_dir + "/include",
					pa_dir + "/src/common",
					pa_dir + "/src/os/win" ]
				pa.headers= findFiles(pa_dir, "*.h")
				pa.src= findFiles(pa_dir + "/src/common", "*.c") +\
						findFiles(pa_dir + "/src/os/win", "*.c") +\
						findFiles(pa_dir + "/src/hostapi/dsound", "*.c") # Not sure
				pa.flags= target_flags + ["w"]
				pa.defines= target_defines + [ "PA_USE_DS" ]
				pa.compiler= c_compiler
				pa.linker= linker
				dep_libs.append(pa)
			dep_include_paths.append(pa_dir + "/include")

		deps_proj= Project()
		deps_proj.name= deps_libname
		deps_proj.type= "lib"
		deps_proj.targetDir= lib_dir
		deps_proj.includeDirs= dep_include_paths + [ common_dep_dir + "./chipmunk/src", common_dep_dir + "/vorbis/lib" ]
		deps_proj.headers= findCplFiles(common_dep_dir, ["*.h", "*.c"])
		deps_proj.src= [ common_dep_dir + "/unity.c" ]
		deps_proj.flags= target_flags + [ "O3" ]
		deps_proj.defines= target_defines
		deps_proj.compiler= c_compiler
		deps_proj.linker= linker

		for d in dep_libs:
			deps_proj.deps.append(d)
			deps_proj.links.append(d)

	### Clover engine ###

	revolc_src_dir= "./source"
	revolc_flags= target_flags + [
		"Wall", "Werror",
		"Wno-unused-function"
	]
	revolc_defines= target_defines + dep_defines
	revolc_includedirs= [ revolc_src_dir ] + dep_include_paths
	revolc_libdirs= [ lib_dir ]
	if env.os == "windows":
		# win-builds mingw is broken.
		win_builds_bin_paths= \
			[s for s in os.environ["PATH"].split(";") if "win-builds" in s]
		if len(win_builds_bin_paths) > 0:
			revolc_libdirs += [ win_builds_bin_paths[0] + "/../lib" ]

	if build_revolc:
		system_links= [ "pthread", "m" ]
		if env.os == "linux":
			system_links += [ "portaudio", "GL", "GLU", "Xrandr", "Xxf86vm", "Xi", "X11", "dl" ]
		elif env.os == "windows":
			system_links += [ "glu32", "opengl32", "gdi32", "wsock32", "ws2_32", "winmm", "ole32", "kernel32" ]

		build_dest_dir= "../builds/" + env.os + env.arch[1:]

		revolc= Project()
		revolc.name= "revolc_" + cfg
		revolc.type= "exe"
		revolc.targetDir= build_dest_dir
		revolc.includeDirs= revolc_includedirs
		revolc.libDirs= revolc_libdirs
		revolc.headers= filterStrs(["/mod/"], findCplFiles(revolc_src_dir, ["*.h", "*.def", "*.c"]))
		revolc.src= [ revolc_src_dir + "/unity.c" ]
		revolc.flags= revolc_flags
		revolc.defines= revolc_defines
		revolc.compiler= c_compiler
		revolc.linker= linker
		revolc.prebuild= lambda: runCodegen(revolc.src[0], revolc_src_dir + "/global/gen_rtti.c", True)

		if build_deps:
			revolc.deps += [ deps_proj ]
		revolc.deps += [ codegen ]

		if env.os == "linux":
			revolc.links += [ "--export-dynamic" ]
		revolc.links += [ deps_libname ]
		revolc.links += system_links
		if env.os == "windows": # Create importlib to engine for dll's
			revolc.links += [ "--out-implib," + lib_dir + "/librevolc_stubs.a" ]

	### Game DLL ###

	resource_dir= "../resources/gamedata"
	mod_src_dir= revolc_src_dir + "/mod"
	mod= Project()
	mod.name= "mod"
	mod.type= "dll"
	mod.targetDir= resource_dir
	mod.includeDirs= revolc_includedirs
	mod.libDirs= revolc_libdirs
	mod.headers= findCplFiles(mod_src_dir, ["*.h", "*.c"])
	mod.src= [ mod_src_dir + "/unity.c" ]
	mod.flags= revolc_flags
	mod.defines= revolc_defines
	mod.compiler= c_compiler
	mod.linker= linker
	mod.deps = [ codegen ]
	mod.prebuild= lambda: runCodegen(mod.src[0], mod_src_dir + "/gen_rtti.c", False)

	if build_revolc:
		mod.deps += [ revolc ]
	if env.os == "linux":
		pass # Linked at runtime
	elif env.os == "windows":
		# Undefined references not allowed in windows DLL
		mod.links += [ "revolc_stubs" ]
	return mod
